{"version":3,"sources":["App.tsx","performance-monitor.ts","serviceWorker.ts","index.tsx"],"names":["AddBar","addTodo","useState","todoName","setTodoName","value","onChange","e","target","onKeyPress","key","placeholder","className","TodoLine","name","slow","Date","now","App","useEffect","startLongTaskObserver","PerformanceObserver","list","perfEntries","getEntries","i","length","longtask","console","log","entryType","datadogLogs","logger","info","duration","performanceEntryType","startTime","observe","entryTypes","todoList","setTodoList","map","index","Boolean","window","location","hostname","match","init","clientToken","datacenter","isCollectingError","sampleRate","ReactDOM","render","StrictMode","document","getElementById","unregister","navigator","serviceWorker","ready","then","registration","catch","error","message"],"mappings":"oRAGA,SAASA,OAAT,GAAmE,IAAjDC,EAAgD,EAAhDA,QAAgD,EAChCC,mBAAS,IADuB,mBACzDC,EADyD,KAC/CC,EAD+C,KAEhE,OACE,2BACEC,MAAOF,EACPG,SAAU,kBAACC,GAAD,OAAOH,EAAYG,EAAEC,OAAOH,QACtCI,WAAY,oBAACF,GACG,UAAVA,EAAEG,MACJT,EAAQE,GACRC,EAAY,MAGhBO,YAAY,WACZC,UAAU,uEAKhB,SAASC,SAAT,GAEE,IAF6C,IAA3BC,EAA0B,EAA1BA,KACZC,EAAOC,KAAKC,MAAQ,IACnBD,KAAKC,MAAQF,IACpB,OACE,wBAAIH,UAAU,2DACXE,GAyBQI,MApBf,SAASA,MACPC,qBAAU,YC9ByB,SAAxBC,wBACI,IAAIC,qBAAoB,SAAUC,GAE/C,IADA,IAAIC,EAAcD,EAAKE,aACdC,EAAI,EAAGA,EAAIF,EAAYG,OAAQD,IAAK,CAC3C,IAAME,EAAWJ,EAAYE,GAC7BG,QAAQC,IAAIF,GACe,aAAvBA,EAASG,WACXC,IAAYC,OAAOC,KAAK,oBAAqB,CAC3CC,SAAUP,EAASO,SACnBC,qBAAsBR,EAASG,UAC/BM,UAAWT,EAASS,gBAMnBC,QAAQ,CAAEC,WAAY,CAAC,WAAY,UDe1ClB,KACC,IAHU,MAImBlB,mBAAmB,IAJtC,mBAINqC,EAJM,KAIIC,EAJJ,KAKb,OACE,yBAAK5B,UAAU,gCACb,yBAAKA,UAAU,2BACb,wBAAIA,UAAU,sBAAd,YACA,kBAACZ,OAAD,CAAQC,QAAS,iBAACa,GAAD,OAAkB0B,EAAY,GAAD,mBAAKD,GAAL,CAAezB,QAC7D,4BACGyB,EAASE,KAAI,SAAC3B,EAAM4B,GAAP,OACZ,kBAAC7B,SAAD,CAAUH,IAAKgC,EAAO5B,KAAMA,WE/BpB6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNhB,IAAYiB,KAAK,CACfC,YAAa,sCACbC,WAAY,KACZC,mBAAmB,EACnBC,WAAY,MAGdrB,IAAYC,OAAOC,KAAK,oDAExBoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHnB,SAASC,aACV,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaL,gBAEdM,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,YCvH5BN,K","file":"static/js/main.5831dedb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { startLongTaskObserver } from \"./performance-monitor\";\nfunction AddBar({ addTodo }: { addTodo: (name: string) => void }) {\n  const [todoName, setTodoName] = useState(\"\");\n  return (\n    <input\n      value={todoName}\n      onChange={(e) => setTodoName(e.target.value)}\n      onKeyPress={(e) => {\n        if (e.key === \"Enter\") {\n          addTodo(todoName);\n          setTodoName(\"\");\n        }\n      }}\n      placeholder=\"add todo\"\n      className=\"w-full appearance-none border border-gray-300 rounded-lg py-2 px-4\"\n    />\n  );\n}\n\nfunction TodoLine({ name }: { name: string }) {\n  const slow = Date.now() + 100;\n  while (Date.now() < slow) {}\n  return (\n    <li className=\"w-full border border-gray-500 rounded-lg py-2 px-4 mt-2\">\n      {name}\n    </li>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    startLongTaskObserver();\n  }, []);\n  const [todoList, setTodoList] = useState<string[]>([]);\n  return (\n    <div className=\"flex flex-row justify-center\">\n      <div className=\"container flex flex-col\">\n        <h1 className=\"underline text-red\">TODOLIST</h1>\n        <AddBar addTodo={(name: string) => setTodoList([...todoList, name])} />\n        <ul>\n          {todoList.map((name, index) => (\n            <TodoLine key={index} name={name} />\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { datadogLogs } from \"@datadog/browser-logs\";\n\nexport const startLongTaskObserver = () => {\n  var observer = new PerformanceObserver(function (list) {\n    var perfEntries = list.getEntries();\n    for (var i = 0; i < perfEntries.length; i++) {\n      const longtask = perfEntries[i];\n      console.log(longtask);\n      if (longtask.entryType === \"longtask\") {\n        datadogLogs.logger.info(\"longtask detected\", {\n          duration: longtask.duration,\n          performanceEntryType: longtask.entryType,\n          startTime: longtask.startTime,\n        });\n      }\n    }\n  });\n  // register observer for long task notifications\n  observer.observe({ entryTypes: [\"longtask\", \"mark\"] });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { datadogLogs } from '@datadog/browser-logs';\n\ndatadogLogs.init({\n  clientToken: 'pubf7c8eec264a69c5aa69ad6fec1bb36b7',\n  datacenter: 'us',\n  isCollectingError: true,\n  sampleRate: 100\n});\n\ndatadogLogs.logger.info('Javascript loaded - React Performance Monitoring')\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}